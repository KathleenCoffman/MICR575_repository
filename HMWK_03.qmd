---
title: "HMWK_03"
format: gfm
editor: visual
---

__Creating and naming variables__  
1. Create a variable called x and use it to store the result of the calculation (3*(4+2).  
2. Then multiply the product by pi value (3.14159).

---

```{r}
(3*(4+2))  
```

---

---

```{r}
x<-(3*(4+2))  
x*3.14159
```

---

3. Use the getwd() function to show your current working directory. Is that a good working directory, and what program do you think set it that way?  
---

```{r}
getwd() 
```

---



__Vectors__  
1. Use the c() function to create a vector of numbers.  

---

```{r}
plant_height<-c(6.0, 8.0, 10.0)  
```

---


2. Use the c() function to create a vector of characters.  

---

```{r}
plant_name<-c("kale", "cilantro", "broccoli")  
```

---


3. Use the c() function to create a vector of characters.  

---

```{r}
plant_index<- 1:10  
```

---


4. Explain why the following code returns what it does. Also address whether you think this was a good decision on the part of the designers of R?  

---

```{r}
v1 <- 1:3  
v2 <- c(1:4)  
v1 + v2  
```

---


_The response saying longer object length is not a multiple of shorter object length occurs when the vector lengths added are not the same. This creates a lot of inconsistency here and room for error. It also means that each has a different number of elements._  

5. Explain the following code and what it does c(1, 5, 9) +3 

---

```{r}
c(1, 5, 9) + 3  
```

---


_This code takes each individual number in parentheses and produces 3 corresponding outcomes where each individual number, (1, 5, and 9) is added with 3 to produce appropriate corresponding outcomes (4, 8, 12). This is probably a better option in adding numbers compared to adding v1 and v2 in the previous question._  

6. Remove (delete) every variable in your workspace  

---

```{r}
ls()  
rm(list=ls())  
```

---


__Graphics__  

1. Load the tidyverse package.  

---

```{r}
library("tidyverse")
```

---
  
2. Recreate the visualization of body_mass_g to flipper_length_mm, from the penguins data set, that is shown in question 8 of section 2.2.5 of R4DS.  

---

```{r}
library(ggthemes)
  install.packages("palmerpenguins", repos = "http://cran.us.r-project.org") 
library("palmerpenguins")  
penguins  
view(penguins)  
ggplot(data = penguins)  
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
)  
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point()  
  ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point()  
  ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point() +
  geom_smooth(method = "lm")  
  ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species)) +
  geom_smooth(method = "lm")  
  ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species, shape = species)) +
  geom_smooth(method = "lm")  
  ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species") + scale_color_colorblind() 
```

---

    
3. Explain why each aesthetic is mapped at the level that it is (i.e., at the global level, in the ggplot() function call, or at the geom level, in the geom_XXX() function call). Noting that a lot of different options will work, but some options are clearly better than others.

_We map body mass and flipper length globally because it tells you what you're comparing, i.e. the "plot objects". Then, we can add layers to add in the actual datapoints, and use the aes argument within geom_point to further different the data visually. (i.e., using color and shape to specify species type)_
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
